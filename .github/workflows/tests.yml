name: Tests

on: [pull_request]

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["2.7", "3.6", "3.7", "3.8", "3.9", "pypy2", "pypy3"]
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        exclude:
          # Disable PyPy3 on Windows, because GHA currently serves version
          # 7.3.2, which has a regression that breaks tox on Windows:
          #
          # https://foss.heptapod.net/pypy/pypy/-/issues/3331
          # https://github.com/tox-dev/tox/issues/1704
          #
          # This can be removed when a fixed version of PyPy is available on
          # GHA, or when a workaround is found.
          - python-version: "pypy3"
            os: "windows-latest"
    env:
      TOXENV: py
    steps:
    - uses: actions/checkout@v2
    - name: ${{ matrix.python-version }} - ${{ matrix.os }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install "tox<3.8.0"
    - name: Run tests
      shell: bash
      run: |
        python -m tox
    - name: Report coverage
      run: |
        tox -e coverage-report,codecov

  other:
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
      matrix:
        toxenv: ["build", "docs", "tz"]
    env:
      TOXENV: ${{ matrix.toxenv }}

    steps:
      - uses: actions/checkout@v2
      - name: ${{ matrix.toxenv }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install tox
        run: |
          python -m pip install --upgrade pip
          if [[ $TOXENV == "tz" ]]; then
            TOX='tox<3.8.0'
          else
            TOX='tox'
          fi
          python -m pip install -U "$TOX"
      - name: Run action
        run: |

          if [[ $TOXENV == "docs" ]]; then
            tox -- -j auto -bhtml -W -n -a --keep-going
          else
            tox
          fi

          if [[ $TOXENV == "build" ]]; then
            # Check that exactly one tarball and one wheel are created
            exactly_one() {
              value=$(find dist -iname $1 | wc -l)
              if [ $value -ne 1 ]; then
                echo "Found $value instances of $1, not 1"
                return 1
              else
                echo "Found exactly 1 instance of $value"
              fi
            }

            exactly_one '*.tar.gz'
            exactly_one '*.whl'
          fi
